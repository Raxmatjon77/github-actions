# name: Deploy with Self-Hosted Runner

# on:
#   push:
#     branches:
#       - master

# jobs:
#   deploy:
#     runs-on: self-hosted

#     steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v3

      # - name: Set up environment file
      #   run: |
      #     echo "NODE_ENV=${{ secrets.NODE_ENV }}" > .env
      #     echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
      #     echo "JWT_AT_SECRET=${{ secrets.JWT_AT_SECRET }}" >> .env
      #     echo "JWT_RT_SECRET=${{ secrets.JWT_RT_SECRET }}" >> .env
      #     echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
      #     echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
      #     echo "DATABASE_DATABASE=${{ secrets.DATABASE_DATABASE }}" >> .env

#       - name: Build and deploy with Docker Compose
#         run: |

#           docker build -t test-action .
            
#           # Start containers in detached mode
#           docker-compose up -d
          
name: Deploy

on:
  push:
    branches:
      - master

env:
  TELEGRAM_BOT_TOKEN: '8028072110:AAG5ERdmz3za_N5YXM9JPp8JTMO6XEqcAv8'
  TELEGRAM_CHAT_ID: '1955031743'

jobs:
  build:
    name: Build 
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Send Telegram Notification (Start Build)
        run: |
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="⏰Deploy started%0A Project: ${{ github.event.repository.name }} %0A Branch: ${{ github.ref_name }} %0A Commit: ${{ github.event.head_commit.message }}%0A Started: $(date)"

      - name: Set up environment file
        run: |
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" > .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_AT_SECRET=${{ secrets.JWT_AT_SECRET }}" >> .env
          echo "JWT_RT_SECRET=${{ secrets.JWT_RT_SECRET }}" >> .env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_DATABASE=${{ secrets.DATABASE_DATABASE }}" >> .env

      - name: Build Docker Image
        run: docker build -t qazo-namoz-image .

      - name: Send Telegram Notification (Build Failed)
        if: failure()
        run: |
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="🚫Build failed%0A Project: ${{ github.event.repository.name }} %0A Branch: ${{ github.ref_name }} %0A Commit: ${{ github.sha }} %0A Finished: $(date)"

  deploy:
    name: Deploy 
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: Install Dependencies
      #   run: sudo apt-get install -y docker.io docker-compose

      - name: Deploy with Docker Compose
        run: docker-compose up -d

      - name: Send Telegram Notification (Deploy Success)
        run: |
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="✅Deploy succeeded%0A Project: ${{ github.event.repository.name }} %0A Branch: ${{ github.ref_name }} %0A Commit: ${{ github.event.head_commit.message }}%0A Bro 😎 We did it 😏"

      - name: Send Telegram Notification (Deploy Failed)
        if: failure()
        run: |
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="🚫Deploy failed%0A Project: ${{ github.event.repository.name }} %0A Branch: ${{ github.ref_name }} %0A Commit: ${{ github.event.head_commit.message }}"
